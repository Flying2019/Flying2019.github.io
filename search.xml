<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test</title>
    <url>/2021/10/07/test/</url>
    <content><![CDATA[<p>test</p>
<span id="more"></span>

<p>$$<br>\sum_{i=1}^{n}\frac{1}{i}<br>$$</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>加密</title>
    <url>/2021/10/10/%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><span id="more"></span>
<style>

.underline-input {
  border: none;
  border-bottom: #099 groove 1px;
  outline: none;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}

.underline-input:focus-visible {
  border-bottom: #0cc groove 1px;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}

.gradual-button {
  padding: 0.5em 1em;
  text-align: center;
  border-radius: 0px;
  border-width: 0px;
  background-color: #ddd;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}

.gradual-button:hover {
  cursor: pointer;
  background-color: #bbb;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}
</style>
<script src="https://cdn.bootcss.com/crypto-js/3.1.9-1/crypto-js.min.js"></script>
<script>
    //DES加密
    function encryptByDES(message, key){
        var keyHex = CryptoJS.enc.Utf8.parse(key);
        var encrypted = CryptoJS.DES.encrypt(message, keyHex, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7
        });
        return encrypted.ciphertext.toString();
    }
    //DES加密
    function decryptByDES(ciphertext, key){
        var keyHex = CryptoJS.enc.Utf8.parse(key);
        var decrypted = CryptoJS.DES.decrypt({
            ciphertext: CryptoJS.enc.Hex.parse(ciphertext)
        }, keyHex, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7
        });
        var result_value = decrypted.toString(CryptoJS.enc.Utf8);
        return result_value;
    }
    function loadMath() {
        if (typeof MathJax === 'undefined') {
            window.MathJax = {
            loader: {
                load: ['[tex]/mhchem'],
                source: {
                '[tex]/amsCd': '[tex]/amscd',
                '[tex]/AMScd': '[tex]/amscd'
                }
            },
            tex: {
                inlineMath: {'[+]': [['$', '$']]},
                packages: {'[+]': ['mhchem']},
                tags: 'ams'
            },
            options: {
                renderActions: {
                findScript: [10, doc => {
                    document.querySelectorAll('script[type^="math/tex"]').forEach(node => {
                    const display = !!node.type.match(/; *mode=display/);
                    const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);
                    const text = document.createTextNode('');
                    node.parentNode.replaceChild(text, node);
                    math.start = {node: text, delim: '', n: 0};
                    math.end = {node: text, delim: '', n: 0};
                    doc.math.push(math);
                    });
                }, '', false],
                insertedScript: [200, () => {
                    document.querySelectorAll('mjx-container').forEach(node => {
                    let target = node.parentNode;
                    if (target.nodeName.toLowerCase() === 'li') {
                        target.parentNode.classList.add('has-jax');
                    }
                    });
                }, '', false]
                }
            }
            };
            (function () {
            var script = document.createElement('script');
            script.src = '//cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
            script.defer = true;
            document.head.appendChild(script);
            })();
        } else {
            MathJax.startup.document.state(0);
            MathJax.texReset();
            MathJax.typeset();
        }
    }
    function encrypt(demo,str1,key1) {
        var s , key , text;
        s = document.getElementById(str1).value;
        key = document.getElementById(key1).value;
        text = encryptByDES(s, key);
        document.getElementById(demo).innerHTML = text;
    }
    function decrypt(demo,str1,key1) {
        var s , key , text;
        s = document.getElementById(str1).value;
        key = document.getElementById(key1).value;
        text = decryptByDES(s, key);
        document.getElementById(demo).innerHTML = text;
        loadMath();
    }
</script>

<h2 id="DES-加密"><a href="#DES-加密" class="headerlink" title="DES 加密"></a>DES 加密</h2><p>文本：</p>
<input id="str1">

<p>秘钥：</p>
<input type="password" id="key1">

<p>加密文本：<p id="demo1"></p></p>
<p><button type="button" onclick="encrypt('demo1','str1','key1')">加密</button></p>
<h2 id="DES-解密"><a href="#DES-解密" class="headerlink" title="DES 解密"></a>DES 解密</h2><p>文本：</p>
<input id="str2">

<p>秘钥：</p>
<input type="password" id="key2">

<p>解密文本：<p id="demo2"></p></p>
<p><button type="button" onclick="decrypt('demo2','str2','key2')">加密</button></p>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>【集训队作业2018】串串</title>
    <url>/2021/10/09/%E4%B8%B2%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a><a href="https://uoj.ac/problem/433">链接</a></h2><span id="more"></span>

<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义一个字符串是双回文串当且仅当其能被划分成两个不为空回文串。</p>
<p>给定长度为 $n$ 的串 $s$，问其本质不同双回文串子串数量。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><del>怎么又是<a href="https://www.cnblogs.com/Flying2018/p/14032526.html"> 2018 年集训队作业</a></del>。</p>
<p>首先我们分析一下双回文串的性质，<del>发现它并没有什么性质</del>。</p>
<p>从定义入手，双回文串的定义似乎与 <a href="https://uoj.ac/problem/219">优秀的拆分</a> 很类似，只不过这里同一个串的所有拆分只记一次。那么我们不妨先求出所有“本质不同回文拆分方案数”之和，然后减去重复部分。</p>
<p>可以发现一个回文拆分方案必然由回文串 $A$ 和 $B$ 拼接而成。回文拆分 $A+B$ 和 $A’+B’$ 本质不同当且仅当 $A\neq A’$ 或 $B\neq B’$。</p>
<p>而一个字符串的本质不同回文串是 $O(n)$ 的。不妨将所有本质不同回文串标号。这样对于一个位置 $p$，求出 $s[:p-1]$ 的所有回文后缀集合 $A_p$ 和 $s[p:]$ 的所有回文前缀集合 $B_p$。最后求 $\displaystyle \bigcup_{p}\ \left((a,b)|a\in A_p,b\in B_p\right)$。当然直接算是 $O(n^2)$。</p>
<p>令 $\text{Suf}(S)$ 表示字符串 $S$ 的最长回文后缀。考虑一个回文串 $S$ 的回文后缀必然是 $\text{Suf}(S)$ 的某个后缀，如果我们把这个关系用树形结构表示出来，那么 $A$ 等价于 $\text{Suf}(s[:p-1])$ 对应节点到根的路径，$B$ 等价于 $\text{Suf}(s[p:])$ 对应节点到根的路径（显然前后缀在回文串中是等价的）。</p>
<p>可以发现这棵树其实就是回文自动机建完后 fail 边连成的树。将 $A$ 的每个点加到 $B$ 对应的节点上，那么等同于问：</p>
<p><strong>给定一颗树，有若干个点集，一开始点集只有一个点，支持合并两个点集，询问一个点集的所有点到根路径的并</strong>。</p>
<p>这是个经典问题，用 dfs 序排序，可以用 set 启发式合并做到 $O(n\log^2 n)$ 或者线段树合并做到 $O(n\log n)$。</p>
<hr>
<p>考虑如何去重。可以发现一个串被重复计算，说明其有一个长度大于一半的回文串。不妨设原串为 $S$，那么一定有：</p>
<p>$$<br>S=LTL^R,T=T^R,L\neq \varnothing<br>$$</p>
<p>假设 $T$ 是空串，那么显然有 $L=L^R$，说明 $S$ 是一个循环串，且 $L$ 是它的一个循环节。否则令 $S’=LT$，显然其有和 $S$ 一样的性质，可以归纳证明。所以如果一个串被重复计算，说明其一定是循环串。</p>
<p>考虑其最短循环节 $T$，令 $S=T^k$：</p>
<ul>
<li>如果 $T$ 是一个回文串，那么 $S=T^k$ 显然还是一个回文串。</li>
<li>如果 $T=A+B$ 是一个双回文串，那么 $S=T^k=(AB)^k=A+B(AB)^k$ 也是一个双回文串。</li>
<li>否则如果 $S=A+B$ 仍然是一个双回文串，由于 $A\neq T^{k’}$，所以 $\exists\ A_1+B_1= T$，故 $A=T^{k’}+A_1$ 为回文串，$B_1$ 同理，那么有 $A_1=A_1^R,B_1=B_1^R$，与假设不符。</li>
</ul>
<p>故 $S=T^k$ 是一个双回文串当且仅当 $T$ 是一个回文串或双回文串，而且可以发现如果 $T$ 是一个回文串那么 $S$ 存在 $k-1$ 种回文分割（因为存在一种分出空串的情况要减掉），否则存在 $k$ 种。</p>
<p>$$<br>aa|baa|baa|baa|b<br>$$</p>
<p>由于所有极长<strong>整</strong>循环串的数量不小于本原平方串，所以显然其上界为 $O(n\log n)$，那么对于循环节相同的整循环串，记录其中次数最大的即可。而对于存在 $k$ 种划分的整循环串，其多算的贡献为 $\frac{k(k-1)}{2}$。</p>
<p>总复杂度 $O(n\log^2 n)$（实现精细一点可能有 $O(n\log n)$）。</p>
<p>注意最后的部分需要对 $O(n)$ 个串扔进 Hash 桶中，单 Hash 的错误率很大，需要用到双 Hash。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>,C=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> fa[N],len[N],tot;</span><br><span class="line"><span class="keyword">namespace</span> PAM&#123;</span><br><span class="line">    <span class="keyword">int</span> ch[N][C],fail[N];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_nxt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">for</span>(;s[p-len[u]<span class="number">-1</span>]!=s[p];u=fail[u]); <span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> las,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="built_in">get_nxt</span>(las,p),c=s[p]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][c]) fail[++tot]=ch[<span class="built_in">get_nxt</span>(fail[u],p)][c],len[tot]=len[u]+<span class="number">2</span>,ch[u][c]=tot;</span><br><span class="line">        <span class="keyword">return</span> ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_nxtr</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">for</span>(;s[p+len[u]+<span class="number">1</span>]!=s[p];u=fail[u]); <span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_r</span><span class="params">(<span class="keyword">int</span> las,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="built_in">get_nxtr</span>(las,p),c=s[p]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][c]) <span class="keyword">throw</span>;</span><br><span class="line">        <span class="keyword">return</span> ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;len[<span class="number">1</span>]=<span class="number">-1</span>;fail[<span class="number">0</span>]=<span class="number">1</span>;tot=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd_fa</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) fa[i]=fail[i]==<span class="number">0</span>?<span class="number">1</span>:fail[i];&#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;g[N];</span><br><span class="line"><span class="keyword">int</span> ap[N],bp[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">21</span>],_2[N*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=fa[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;<span class="number">1</span>&lt;&lt;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">21</span>][N*<span class="number">2</span>],dep[N*<span class="number">2</span>],id[N*<span class="number">2</span>],dfn[N*<span class="number">2</span>],tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dep[u]=dep[p]+<span class="number">1</span>;</span><br><span class="line">        id[++tot]=u;dfn[u]=tot;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v:g[u]) <span class="built_in">dfs</span>(v,u),id[++tot]=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) f[<span class="number">0</span>][i]=id[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++) _2[i]=_2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">2</span>;p&lt;=tot;i++,p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+p<span class="number">-1</span>&lt;=tot;j++)</span><br><span class="line">            <span class="keyword">if</span>(dep[f[i<span class="number">-1</span>][j]]&lt;dep[f[i<span class="number">-1</span>][j+p/<span class="number">2</span>]]) f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> f[i][j]=f[i<span class="number">-1</span>][j+p/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        x=dfn[x],y=dfn[y];</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="keyword">int</span> p=_2[y-x+<span class="number">1</span>],u=<span class="number">1</span>&lt;&lt;p;</span><br><span class="line">        <span class="keyword">return</span> dep[f[p][x]]&gt;dep[f[p][y-u+<span class="number">1</span>]]?f[p][y-u+<span class="number">1</span>]:f[p][x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> ST::lca;<span class="keyword">using</span> ST::dep;</span><br><span class="line"><span class="keyword">int</span> dfn[N],ind,id[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[dfn[u]=++ind]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:g[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> seg_tree&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M=N*<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> ls[M],rs[M],cnt;</span><br><span class="line">    <span class="keyword">int</span> f[M],fl[M],fr[M];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        f[u]=f[ls[u]]+f[rs[u]]-dep[<span class="built_in">lca</span>(id[fr[ls[u]]],id[fl[rs[u]]])];</span><br><span class="line">        fl[u]=fl[ls[u]]?fl[ls[u]]:fl[rs[u]];</span><br><span class="line">        fr[u]=fr[rs[u]]?fr[rs[u]]:fr[ls[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) u=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;fl[u]=fr[u]=p,f[u]=dep[id[p]];<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p&lt;=mid) <span class="built_in">insert</span>(ls[u],l,mid,p);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">insert</span>(rs[u],mid+<span class="number">1</span>,r,p);</span><br><span class="line">        <span class="built_in">upd</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x+y;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ls[x]=<span class="built_in">merge</span>(ls[x],ls[y],l,mid);rs[x]=<span class="built_in">merge</span>(rs[x],rs[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">upd</span>(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> seg_tree::insert;<span class="keyword">using</span> seg_tree::merge;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;q[N];</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:q[u]) <span class="built_in">insert</span>(root[u],<span class="number">1</span>,tot,dfn[v]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:g[u]) <span class="built_in">solve</span>(v),root[u]=<span class="built_in">merge</span>(root[u],root[v],<span class="number">1</span>,tot);</span><br><span class="line">    <span class="keyword">if</span>(u!=<span class="number">1</span>) ans+=<span class="built_in">max</span>(seg_tree::f[root[u]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> runs&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1019260817</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line">    P <span class="keyword">operator</span> +(<span class="keyword">const</span> P a,<span class="keyword">const</span> P b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>((a.fi+b.fi)%mod,(a.se+b.se)%mod);&#125;</span><br><span class="line">    P <span class="keyword">operator</span> +(<span class="keyword">const</span> P a,<span class="keyword">const</span> <span class="keyword">int</span> b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>((a.fi+b)%mod,(a.se+b)%mod);&#125;</span><br><span class="line">    P <span class="keyword">operator</span> -(<span class="keyword">const</span> P a,<span class="keyword">const</span> P b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>((a.fi-b.fi+mod)%mod,(a.se-b.se+mod)%mod);&#125;</span><br><span class="line">    P <span class="keyword">operator</span> *(<span class="keyword">const</span> P a,<span class="keyword">const</span> P b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>(<span class="number">1ll</span>*a.fi*b.fi%mod,<span class="number">1ll</span>*a.se*b.se%mod);&#125;</span><br><span class="line">    <span class="keyword">const</span> P B=<span class="built_in">MP</span>(<span class="number">233</span>,<span class="number">2333</span>);</span><br><span class="line">    <span class="keyword">int</span> s[N];</span><br><span class="line">    P h[N],bs[N],bh[N];</span><br><span class="line">    <span class="function">P <span class="title">get</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*bs[r-l+<span class="number">1</span>];&#125;</span><br><span class="line">    <span class="function">P <span class="title">getb</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> bh[l]-bh[r+<span class="number">1</span>]*bs[r-l+<span class="number">1</span>];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_pal</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">get</span>(l,r)==<span class="built_in">getb</span>(l,r);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">qry_pal</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=ap[r];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=_2[dep[p]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(len[f[p][i]]&gt;r-l+<span class="number">1</span>) p=f[p][i];</span><br><span class="line">        <span class="keyword">if</span>(len[p]&gt;r-l+<span class="number">1</span>) p=f[p][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(len[p]==r-l+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">is_pal</span>(l,r-len[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n-<span class="built_in">max</span>(x,y)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">get</span>(x,x+mid<span class="number">-1</span>)==<span class="built_in">get</span>(y,y+mid<span class="number">-1</span>)) l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="built_in">min</span>(x,y);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">get</span>(x-mid+<span class="number">1</span>,x)==<span class="built_in">get</span>(y-mid+<span class="number">1</span>,y)) l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>&#123;<span class="keyword">int</span> l=<span class="built_in">lcp</span>(l1,l2); <span class="keyword">return</span> s[l1+l]&lt;s[l2+l];&#125;</span><br><span class="line">    <span class="keyword">int</span> nxt[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lyndon</span><span class="params">(<span class="keyword">bool</span> ell)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) <span class="keyword">for</span>(nxt[i]=i+<span class="number">1</span>;nxt[i] &amp;&amp; <span class="built_in">cmp</span>(nxt[i],i)==ell;nxt[i]=nxt[nxt[i]]);&#125;</span><br><span class="line">    pair&lt;P,<span class="keyword">int</span>&gt; per[N*<span class="number">20</span>];<span class="keyword">int</span> pt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make_runs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=n<span class="number">-1</span>;k;k--)</span><br><span class="line">        <span class="keyword">if</span>(nxt[k])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> dl=<span class="built_in">lcs</span>(k,nxt[k]),dr=<span class="built_in">lcp</span>(k,nxt[k]),p=nxt[k]-k;</span><br><span class="line">            <span class="keyword">int</span> l=k-dl+<span class="number">1</span>,r=nxt[k]+dr<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dl+dr&lt;=p) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;l+p &amp;&amp; i+<span class="number">2</span>*p<span class="number">-1</span>&lt;=r;i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">qry_pal</span>(i,i+<span class="number">2</span>*p<span class="number">-1</span>))</span><br><span class="line">            per[++pt]=<span class="built_in">MP</span>(<span class="built_in">get</span>(i,i+<span class="number">2</span>*p<span class="number">-1</span>),(r-i+<span class="number">1</span>)/p-<span class="built_in">is_pal</span>(i,i+<span class="number">2</span>*p<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=::s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        bs[<span class="number">0</span>]=<span class="built_in">MP</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=h[i<span class="number">-1</span>]*B+s[i],bs[i]=bs[i<span class="number">-1</span>]*B;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) bh[i]=bh[i+<span class="number">1</span>]*B+s[i];</span><br><span class="line">        <span class="built_in">lyndon</span>(<span class="number">0</span>);<span class="built_in">make_runs</span>();</span><br><span class="line">        <span class="built_in">lyndon</span>(<span class="number">1</span>);<span class="built_in">make_runs</span>();</span><br><span class="line">        <span class="built_in">sort</span>(per+<span class="number">1</span>,per+pt+<span class="number">1</span>);<span class="built_in">reverse</span>(per+<span class="number">1</span>,per+pt+<span class="number">1</span>);</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pt;i++)</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span> || per[i].fi!=per[i<span class="number">-1</span>].fi) res+=<span class="number">1ll</span>*per[i].se*(per[i].se<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        ans-=res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    PAM::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) g[fa[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ap[i]=PAM::<span class="built_in">insert</span>(ap[i<span class="number">-1</span>],i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) bp[i]=PAM::<span class="built_in">find_r</span>(bp[i+<span class="number">1</span>],i);</span><br><span class="line">    PAM::<span class="built_in">upd_fa</span>();</span><br><span class="line">    fa[<span class="number">1</span>]=<span class="number">0</span>;len[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++) g[fa[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ap[i]=<span class="built_in">max</span>(ap[i],<span class="number">1</span>),bp[i]=<span class="built_in">max</span>(bp[i],<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">init_f</span>(tot);ST::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) q[bp[i]].<span class="built_in">push_back</span>(ap[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>),<span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line">    runs::<span class="built_in">solve</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
