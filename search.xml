<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AtCoder Grand Contest 031</title>
    <url>/2021/10/17/agc031/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a><a href="https://atcoder.jp/contests/agc031">链接</a></h2><span id="more"></span>

<h2 id="D-A-Sequence-of-Permutations"><a href="#D-A-Sequence-of-Permutations" class="headerlink" title="D. A Sequence of Permutations"></a>D. A Sequence of Permutations</h2><p>考虑 $f(p,q)=pq^{-1}$。枚举一下有：</p>
<p>$$<br>p\<br>q\<br>qp^-\<br>qp^-q^-\<br>qp^-q^-pq^-\<br>qp^-q^-ppq^-\<br>qp^-q^-pqpq^-\<br>qp^-q^-pqp^-qpq^-<br>$$</p>
<p>肉眼可见有 $qp^-q^-p$ 一直保留，所以本质上是一个 $6$ 的循环节。</p>
<p>那么直接快速幂即可。</p>
<p>复杂度 $O(n\log k)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">perm</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[N];</span><br><span class="line">    <span class="built_in">perm</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));&#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [](<span class="keyword">int</span> x)&#123;<span class="keyword">return</span> a[x];&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="function">perm <span class="title">inv</span><span class="params">(perm &amp;a)</span></span>&#123;perm b;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[a[i]]=i;<span class="keyword">return</span> b;&#125;</span><br><span class="line">perm r,c;</span><br><span class="line">perm <span class="keyword">operator</span> *(perm a,perm b)&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) c[i]=a[b[i]];<span class="keyword">return</span> c;&#125;</span><br><span class="line"><span class="function">perm <span class="title">ksm</span><span class="params">(perm a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) r[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a) <span class="keyword">if</span>(b&amp;<span class="number">1</span>) r=r*a;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">perm p,q,t,ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);--k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q[i]);</span><br><span class="line">    t=q*<span class="built_in">inv</span>(p)*<span class="built_in">inv</span>(q)*p;</span><br><span class="line">    ans=p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k%<span class="number">6</span>;i++) ans=q,q=q*<span class="built_in">inv</span>(p),p=ans;</span><br><span class="line">    ans=<span class="built_in">ksm</span>(t,k/<span class="number">6</span>)*ans*<span class="built_in">ksm</span>(<span class="built_in">inv</span>(t),k/<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Snuke-the-Phantom-Thief"><a href="#E-Snuke-the-Phantom-Thief" class="headerlink" title="E. Snuke the Phantom Thief"></a>E. Snuke the Phantom Thief</h2><p>考虑行列分开算，可以发现一个 $\leq a_i$ 个数不超过 $b_i$ 限制，可以看做第 $b_i+1$ 个宝石必须 $&gt;a_i$。假设总共拿了 $k$ 颗宝石，那么一个 $\geq a_i$ 个数不超过 $b_i$ 限制可以看做第 $b_{k-i}$ 个宝石必须 $&lt;a_i$。</p>
<p>枚举 $k$，那么每个宝石等价于有一个 rank 的限制，排名必须在 $[l,r]$ 区间。</p>
<p>然后行列建点，行可行区间向宝石连边，宝石向列可行区间连边，每个宝石独自限流 $1$，跑最大费用最大流即可。</p>
<p>复杂度 $O(n^3m)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> __int128 lll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30010</span>,M=<span class="number">400010</span>,inf=<span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">const</span> ll winf=<span class="number">1000000000000000000ll</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">road</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nxt,to,f;</span><br><span class="line">    ll w;</span><br><span class="line">&#125;r[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r[++cnt]=(road)&#123;head[u],v,f,w&#125;;head[u]=cnt;</span><br><span class="line">    r[++cnt]=(road)&#123;head[v],u,<span class="number">0</span>,-w&#125;;head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> MCMF&#123;</span><br><span class="line">    ll dis[N];</span><br><span class="line">    <span class="keyword">int</span> all,fl[N],pre[N],bef[N];</span><br><span class="line">    <span class="keyword">bool</span> in[N];</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=all;i++) dis[i]=-winf,fl[i]=inf,in[i]=<span class="literal">false</span>;</span><br><span class="line">        dis[s]=<span class="number">0</span>; pre[t]=<span class="number">-1</span>;in[s]=<span class="literal">true</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(s);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            in[u]=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=r[i].nxt)</span><br><span class="line">            <span class="keyword">if</span>(r[i].f)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v=r[i].to;</span><br><span class="line">                <span class="keyword">if</span>(dis[v]&lt;dis[u]+r[i].w)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v]=dis[u]+r[i].w;</span><br><span class="line">                    fl[v]=<span class="built_in">min</span>(fl[u],r[i].f);</span><br><span class="line">                    pre[v]=u,bef[v]=i;</span><br><span class="line">                    <span class="keyword">if</span>(!in[v]) in[v]=<span class="literal">true</span>,q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre[t]!=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxf;ll minw;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">spfa</span>(s,t))</span><br><span class="line">        &#123;</span><br><span class="line">            maxf+=fl[t],minw+=fl[t]*dis[t];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> u=t;u!=s;u=pre[u])</span><br><span class="line">            r[bef[u]].f-=fl[t],r[bef[u]^<span class="number">1</span>].f+=fl[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=all;i++) head[i]=dis[i]=<span class="number">0</span>;</span><br><span class="line">        all=<span class="number">0</span>;cnt=<span class="number">1</span>;</span><br><span class="line">        maxf=minw=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chkmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;x=<span class="built_in">min</span>(x,y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chkmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;x=<span class="built_in">max</span>(x,y);&#125;</span><br><span class="line"><span class="keyword">int</span> x[N],y[N];ll w[N];</span><br><span class="line"><span class="keyword">int</span> px[N],py[N],po[N];</span><br><span class="line"><span class="keyword">int</span> s,t,tt,n,m;</span><br><span class="line"><span class="keyword">int</span> lx[N],rx[N],ly[N],ry[N];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> id=[&amp;](<span class="keyword">int</span> x,<span class="keyword">int</span> d)&#123;<span class="keyword">return</span> x+<span class="number">2</span>*k+d*n;&#125;;</span><br><span class="line">    s=<span class="built_in">id</span>(n,<span class="number">1</span>)+<span class="number">1</span>,t=s+<span class="number">1</span>;MCMF::all=t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) <span class="built_in">add</span>(s,i,<span class="number">1</span>,<span class="number">0</span>),<span class="built_in">add</span>(i+k,t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">add</span>(<span class="built_in">id</span>(i,<span class="number">0</span>),<span class="built_in">id</span>(i,<span class="number">1</span>),<span class="number">1</span>,w[i]),lx[i]=ly[i]=<span class="number">1</span>,rx[i]=ry[i]=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    <span class="keyword">if</span>(po[i]==<span class="number">0</span> &amp;&amp; py[i]+<span class="number">1</span>&lt;=k) <span class="built_in">chkmax</span>(lx[py[i]+<span class="number">1</span>],px[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(po[i]==<span class="number">1</span> &amp;&amp; py[i]+<span class="number">1</span>&lt;=k) <span class="built_in">chkmin</span>(rx[k-py[i]],px[i]<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(po[i]==<span class="number">2</span> &amp;&amp; py[i]+<span class="number">1</span>&lt;=k) <span class="built_in">chkmax</span>(ly[py[i]+<span class="number">1</span>],px[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(po[i]==<span class="number">3</span> &amp;&amp; py[i]+<span class="number">1</span>&lt;=k) <span class="built_in">chkmin</span>(ry[k-py[i]],px[i]<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=k;i++) <span class="built_in">chkmax</span>(lx[i],lx[i<span class="number">-1</span>]),<span class="built_in">chkmax</span>(ly[i],ly[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i;i--) <span class="built_in">chkmin</span>(rx[i],rx[i+<span class="number">1</span>]),<span class="built_in">chkmin</span>(ry[i],ry[i+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(lx[i]&lt;=x[j] &amp;&amp; x[j]&lt;=rx[i]) <span class="built_in">add</span>(i,<span class="built_in">id</span>(j,<span class="number">0</span>),<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="keyword">if</span>(ly[i]&lt;=y[j] &amp;&amp; y[j]&lt;=ry[i]) <span class="built_in">add</span>(<span class="built_in">id</span>(j,<span class="number">1</span>),i+k,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    MCMF::<span class="built_in">work</span>(s,t);</span><br><span class="line">    <span class="keyword">if</span>(MCMF::maxf==k) ans=<span class="built_in">max</span>(ans,MCMF::minw);</span><br><span class="line">    MCMF::<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;x[i],&amp;y[i],&amp;w[i]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> op[<span class="number">3</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,op,&amp;px[i],&amp;py[i]);</span><br><span class="line">        po[i]=(op[<span class="number">0</span>]==<span class="string">&#x27;L&#x27;</span>?<span class="number">0</span>:(op[<span class="number">0</span>]==<span class="string">&#x27;R&#x27;</span>?<span class="number">1</span>:(op[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>?<span class="number">2</span>:<span class="number">3</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">solve</span>(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="F-Walk-on-Graph"><a href="#F-Walk-on-Graph" class="headerlink" title="F. Walk on Graph"></a>F. Walk on Graph</h2><p>神仙题。</p>
<p>首先可以发现如果一个点周围有边 $a$，那么来回走就能 $x\rightarrow 4x+3a$。如果同时有 $x\rightarrow 4x+3b$，由于 $4$ 在奇数模数下有逆元，所以有 $x\rightarrow x+(a-b)$。</p>
<p>不妨令 $g=\gcd{\Delta w}$，那么 $x$ 可以任意加上 $3qg,q\in \mathbb{Z}$。这样可以令 $\text{mod}’=\gcd(\text{mod},3g)$。</p>
<p>考虑将每个数字的状态用 $(p,q)=px+qg$ 表示，其中 $p$ 是 $2$ 的次幂。可以发现 $q\in[0,2]$，然后显然有 $(px,qg)\rightarrow (4px,4qg)=(4px,qg)$，所以 $p\in[1,2]$。</p>
<p>这样总共只有 $6$ 种状态，总共 $6n$ 个点，直接枚举每条边对应点连边即可。</p>
<p>考虑答案，可以发现最后要从状态 $(p,q)$ 走到 $(0,0)$，而且 $(p,q)$ 需要能表示 $r$，这个可以直接预处理，复杂度 $O(\text{mod})$。</p>
<p>总复杂度 $O(\text{mod}+(n+m+q)\log n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 600010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> y==<span class="number">0</span>?x:<span class="built_in">gcd</span>(y,x%y);&#125;</span><br><span class="line"><span class="keyword">int</span> x[N],y[N],w[N],f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==f[x]?f[x]:(f[x]=<span class="built_in">find</span>(f[x]));&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;x=<span class="built_in">find</span>(x);y=<span class="built_in">find</span>(y);<span class="keyword">if</span>(x!=y) f[x]=y;&#125;</span><br><span class="line"><span class="keyword">bool</span> pre[<span class="number">2</span>][<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,q,mod,g=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q,&amp;mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;x[i],&amp;y[i],&amp;w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++) g=<span class="built_in">gcd</span>(g,<span class="built_in">abs</span>(w[i]-w[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">if</span>(!g) g=mod;</span><br><span class="line">    <span class="keyword">else</span> mod=<span class="built_in">gcd</span>(mod,g*<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> w0=w[<span class="number">1</span>]%g;</span><br><span class="line">    <span class="keyword">auto</span> id=[&amp;](<span class="keyword">int</span> u,<span class="keyword">int</span> p,<span class="keyword">int</span> q)&#123;<span class="built_in"><span class="keyword">return</span></span> (u<span class="number">-1</span>)*<span class="number">6</span>+p*<span class="number">3</span>+q;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=w0;i&lt;mod*<span class="number">2</span>;i++,j=j*<span class="number">2</span>%mod) pre[i&amp;<span class="number">1</span>][j]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">6</span>*n;i++) f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">2</span>;p++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;<span class="number">3</span>;q++)</span><br><span class="line">            <span class="built_in">merge</span>(<span class="built_in">id</span>(x[i],p,q),<span class="built_in">id</span>(y[i],!p,(<span class="number">2</span>*q+(w[i]-w0)/g)%<span class="number">3</span>)),</span><br><span class="line">            <span class="built_in">merge</span>(<span class="built_in">id</span>(y[i],p,q),<span class="built_in">id</span>(x[i],!p,(<span class="number">2</span>*q+(w[i]-w0)/g)%<span class="number">3</span>));</span><br><span class="line">    <span class="keyword">auto</span> check=[&amp;](<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=<span class="number">0</span>;p&lt;<span class="number">2</span>;p++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;<span class="number">3</span>;q++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(<span class="built_in">id</span>(s,p,q))==<span class="built_in">find</span>(<span class="built_in">id</span>(t,<span class="number">0</span>,<span class="number">0</span>)) &amp;&amp; pre[p][(l+w0+(<span class="number">3</span>-q)*g)%mod]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">while</span>(q --&gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s,t,l;<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;s,&amp;t,&amp;l);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="built_in">check</span>(s,t,l)?<span class="string">&quot;YES&quot;</span>:<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Atcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AtCoder Grand Contest 032</title>
    <url>/2021/10/17/agc032/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a><a href="https://atcoder.jp/contests/agc032/tasks">链接</a></h2><span id="more"></span>

<h2 id="C-Three-Circuits"><a href="#C-Three-Circuits" class="headerlink" title="C. Three Circuits"></a>C. Three Circuits</h2><p>首先显然需要有欧拉回路，即所有点度数都是偶数。</p>
<p>假如有 $6$ 度的点或者超过两个 $4$ 度点一定合法。如果不到两个 $4$ 度点就不合法。</p>
<p>当有两个 $4$ 度点时，考虑是否连成两个环，直接删去一个 $4$ 度点后判是否连通即可。</p>
<p>复杂度 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> f[x]==x?f[x]:(f[x]=<span class="built_in">find</span>(f[x]));&#125;</span><br><span class="line"><span class="keyword">int</span> x[N],y[N],d[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x[i],&amp;y[i]),d[x[i]]++,d[y[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]&amp;<span class="number">1</span>)&#123;<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]&gt;<span class="number">4</span>)&#123;<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]==<span class="number">4</span>) c++;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;<span class="number">2</span>)&#123;<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(c&lt;<span class="number">2</span>)&#123;<span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(d[i]==<span class="number">4</span>)&#123;c=i;<span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(x[i]!=c &amp;&amp; y[i]!=c) f[<span class="built_in">find</span>(x[i])]=<span class="built_in">find</span>(y[i]);</span><br><span class="line">    <span class="keyword">int</span> d=<span class="built_in">find</span>(c==<span class="number">1</span>?<span class="number">2</span>:<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(i!=c &amp;&amp; <span class="built_in">find</span>(i)!=d)&#123;<span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="D-Rotation-Sort"><a href="#D-Rotation-Sort" class="headerlink" title="D. Rotation Sort"></a>D. Rotation Sort</h2><p>可以发现 $1$ 操作本质上是将一个数往右插，$2$ 就是把一个数往左插。</p>
<p>从左往右处理，考虑一个数如果向右插，等同于将其扔掉（直接计入答案）。所以考虑维护一个上升的序列表示没有向右插的集合。显然只要记录这个序列的最大值即可。</p>
<p>用 $f_{i,j}$ 表示前 $i$ 个数，上升序列最大值为 $j$ 的最小代价。</p>
<p>考虑新加数为 $x$，如果 $x&gt;j$ 那么可以向右插或者加入序列。如果 $x&lt;j$ 就只能向左插入序列。</p>
<p>复杂度 $O(n^2)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 5010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">ll f[N][N];</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chkmin</span><span class="params">(ll &amp;x,ll y)</span></span>&#123;x=<span class="built_in">min</span>(x,y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]&lt;j) <span class="built_in">chkmin</span>(f[i][j],f[i<span class="number">-1</span>][j]+b);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">chkmin</span>(f[i][j],f[i<span class="number">-1</span>][j]+a),<span class="built_in">chkmin</span>(f[i][p[i]],f[i<span class="number">-1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    ll ans=<span class="number">1e16</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=<span class="built_in">min</span>(ans,f[n][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="E-Modulo-Pairing"><a href="#E-Modulo-Pairing" class="headerlink" title="E. Modulo Pairing"></a>E. Modulo Pairing</h2><p>显然只有两种可能：相加不超过 $M$ 与超过 $M$。</p>
<p>考虑先将原序列排序，可以证明，一定存在一个分界线，满足分界线左边右边各自首尾匹配。具体证明分类讨论一下即可。</p>
<p>右边部分显然要所有匹配 $&gt;m$，而右边和显然是单减的，所以可以二分。</p>
<p>总复杂度 $O(n\log n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[N],n,m,ans=<span class="number">2e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;<span class="number">2</span>*x+<span class="number">2</span>*i&lt;=<span class="number">2</span>*n;i++) <span class="keyword">if</span>(a[<span class="number">2</span>*x+i]+a[<span class="number">2</span>*n-i+<span class="number">1</span>]&lt;m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++) res=<span class="built_in">max</span>(res,(a[i]+a[<span class="number">2</span>*x-i+<span class="number">1</span>])%m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;<span class="number">2</span>*x+<span class="number">2</span>*i&lt;=<span class="number">2</span>*n;i++) res=<span class="built_in">max</span>(res,(a[<span class="number">2</span>*x+i]+a[<span class="number">2</span>*n-i+<span class="number">1</span>])%m);</span><br><span class="line">    ans=<span class="built_in">min</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">2</span>*n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) <span class="built_in">upd</span>(mid),r=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="F-One-Third"><a href="#F-One-Third" class="headerlink" title="F. One Third"></a>F. One Third</h2><p>考虑距离 $\frac 13$ 最近很难做，如果将序列每 $\frac 13$ 分成一块并且映射到一起，可以发现任意两个不同色的点之间距离就是到 $\frac 13$ 的距离。</p>
<p>这样转化为 $n$ 个点之间的不同色点距离最小值。</p>
<p>考虑一个式子：</p>
<p>$$<br>E(L_{k})=\frac 1n\left(\sum_{0&lt;i&lt;k}\frac 1{n-i}\right)<br>$$</p>
<p>其中 $L_{k}$ 表示第 $k$ 小的距离。具体证明可以用 min-max 容斥然后随便推一推。</p>
<p>这样枚举 $n$ 个点之间第 $k$ 对相邻点是第一对不同色点，那么前 $k$ 对一定是同色点，有：</p>
<p>$$<br>ans=\frac 1{3n}\sum_{i=1}^n\left(\frac{1}{3^{i-1}}-\frac{1}{3^i}\right)\sum_{j&lt;i}\frac1{n-i}<br>$$</p>
<p>直接处理即可，复杂度 $O(n)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b=mod<span class="number">-2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) r=<span class="number">1ll</span>*r*a%mod;</span><br><span class="line">        a=<span class="number">1ll</span>*a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> _3[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    _3[<span class="number">1</span>]=<span class="built_in">ksm</span>(<span class="number">3</span>),_3[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) _3[i]=<span class="number">1ll</span>*_3[i<span class="number">-1</span>]*_3[<span class="number">1</span>]%mod;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,res=<span class="built_in">ksm</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=(ans+<span class="number">1ll</span>*(_3[i<span class="number">-1</span>]-_3[i])%mod*res)%mod;</span><br><span class="line">        res=(res+<span class="built_in">ksm</span>(n-i))%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="number">1ll</span>*ans*<span class="built_in">ksm</span>(<span class="number">3</span>*n)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Atcoder</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2021/10/07/test/</url>
    <content><![CDATA[<p>test</p>
<span id="more"></span>

<p>$$<br>\sum_{i=1}^{n}\frac{1}{i}<br>$$</p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>【集训队作业2018】串串</title>
    <url>/2021/10/09/%E4%B8%B2%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a><a href="https://uoj.ac/problem/433">链接</a></h2><span id="more"></span>

<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>定义一个字符串是双回文串当且仅当其能被划分成两个不为空回文串。</p>
<p>给定长度为 $n$ 的串 $s$，问其本质不同双回文串子串数量。</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><del>怎么又是<a href="https://www.cnblogs.com/Flying2018/p/14032526.html"> 2018 年集训队作业</a></del>。</p>
<p>首先我们分析一下双回文串的性质，<del>发现它并没有什么性质</del>。</p>
<p>从定义入手，双回文串的定义似乎与 <a href="https://uoj.ac/problem/219">优秀的拆分</a> 很类似，只不过这里同一个串的所有拆分只记一次。那么我们不妨先求出所有“本质不同回文拆分方案数”之和，然后减去重复部分。</p>
<p>可以发现一个回文拆分方案必然由回文串 $A$ 和 $B$ 拼接而成。回文拆分 $A+B$ 和 $A’+B’$ 本质不同当且仅当 $A\neq A’$ 或 $B\neq B’$。</p>
<p>而一个字符串的本质不同回文串是 $O(n)$ 的。不妨将所有本质不同回文串标号。这样对于一个位置 $p$，求出 $s[:p-1]$ 的所有回文后缀集合 $A_p$ 和 $s[p:]$ 的所有回文前缀集合 $B_p$。最后求 $\displaystyle \bigcup_{p}\ \left((a,b)|a\in A_p,b\in B_p\right)$。当然直接算是 $O(n^2)$。</p>
<p>令 $\text{Suf}(S)$ 表示字符串 $S$ 的最长回文后缀。考虑一个回文串 $S$ 的回文后缀必然是 $\text{Suf}(S)$ 的某个后缀，如果我们把这个关系用树形结构表示出来，那么 $A$ 等价于 $\text{Suf}(s[:p-1])$ 对应节点到根的路径，$B$ 等价于 $\text{Suf}(s[p:])$ 对应节点到根的路径（显然前后缀在回文串中是等价的）。</p>
<p>可以发现这棵树其实就是回文自动机建完后 fail 边连成的树。将 $A$ 的每个点加到 $B$ 对应的节点上，那么等同于问：</p>
<p><strong>给定一颗树，有若干个点集，一开始点集只有一个点，支持合并两个点集，询问一个点集的所有点到根路径的并</strong>。</p>
<p>这是个经典问题，用 dfs 序排序，可以用 set 启发式合并做到 $O(n\log^2 n)$ 或者线段树合并做到 $O(n\log n)$。</p>
<hr>
<p>考虑如何去重。可以发现一个串被重复计算，说明其有一个长度大于一半的回文串。不妨设原串为 $S$，那么一定有：</p>
<p>$$<br>S=LTL^R,T=T^R,L\neq \varnothing<br>$$</p>
<p>假设 $T$ 是空串，那么显然有 $L=L^R$，说明 $S$ 是一个循环串，且 $L$ 是它的一个循环节。否则令 $S’=LT$，显然其有和 $S$ 一样的性质，可以归纳证明。所以如果一个串被重复计算，说明其一定是循环串。</p>
<p>考虑其最短循环节 $T$，令 $S=T^k$：</p>
<ul>
<li>如果 $T$ 是一个回文串，那么 $S=T^k$ 显然还是一个回文串。</li>
<li>如果 $T=A+B$ 是一个双回文串，那么 $S=T^k=(AB)^k=A+B(AB)^k$ 也是一个双回文串。</li>
<li>否则如果 $S=A+B$ 仍然是一个双回文串，由于 $A\neq T^{k’}$，所以 $\exists\ A_1+B_1= T$，故 $A=T^{k’}+A_1$ 为回文串，$B_1$ 同理，那么有 $A_1=A_1^R,B_1=B_1^R$，与假设不符。</li>
</ul>
<p>故 $S=T^k$ 是一个双回文串当且仅当 $T$ 是一个回文串或双回文串，而且可以发现如果 $T$ 是一个回文串那么 $S$ 存在 $k-1$ 种回文分割（因为存在一种分出空串的情况要减掉），否则存在 $k$ 种。</p>
<p>$$<br>aa|baa|baa|baa|b<br>$$</p>
<p>由于所有极长<strong>整</strong>循环串的数量不小于本原平方串，所以显然其上界为 $O(n\log n)$，那么对于循环节相同的整循环串，记录其中次数最大的即可。而对于存在 $k$ 种划分的整循环串，其多算的贡献为 $\frac{k(k-1)}{2}$。</p>
<p>总复杂度 $O(n\log^2 n)$（实现精细一点可能有 $O(n\log n)$）。</p>
<p>注意最后的部分需要对 $O(n)$ 个串扔进 Hash 桶中，单 Hash 的错误率很大，需要用到双 Hash。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>,C=<span class="number">26</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> fa[N],len[N],tot;</span><br><span class="line"><span class="keyword">namespace</span> PAM&#123;</span><br><span class="line">    <span class="keyword">int</span> ch[N][C],fail[N];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_nxt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">for</span>(;s[p-len[u]<span class="number">-1</span>]!=s[p];u=fail[u]); <span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> las,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="built_in">get_nxt</span>(las,p),c=s[p]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][c]) fail[++tot]=ch[<span class="built_in">get_nxt</span>(fail[u],p)][c],len[tot]=len[u]+<span class="number">2</span>,ch[u][c]=tot;</span><br><span class="line">        <span class="keyword">return</span> ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_nxtr</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">for</span>(;s[p+len[u]+<span class="number">1</span>]!=s[p];u=fail[u]); <span class="keyword">return</span> u;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_r</span><span class="params">(<span class="keyword">int</span> las,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u=<span class="built_in">get_nxtr</span>(las,p),c=s[p]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch[u][c]) <span class="keyword">throw</span>;</span><br><span class="line">        <span class="keyword">return</span> ch[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;len[<span class="number">1</span>]=<span class="number">-1</span>;fail[<span class="number">0</span>]=<span class="number">1</span>;tot=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd_fa</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) fa[i]=fail[i]==<span class="number">0</span>?<span class="number">1</span>:fail[i];&#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;g[N];</span><br><span class="line"><span class="keyword">int</span> ap[N],bp[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">21</span>],_2[N*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=fa[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;<span class="number">1</span>&lt;&lt;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ST&#123;</span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">21</span>][N*<span class="number">2</span>],dep[N*<span class="number">2</span>],id[N*<span class="number">2</span>],dfn[N*<span class="number">2</span>],tot;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dep[u]=dep[p]+<span class="number">1</span>;</span><br><span class="line">        id[++tot]=u;dfn[u]=tot;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v:g[u]) <span class="built_in">dfs</span>(v,u),id[++tot]=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) f[<span class="number">0</span>][i]=id[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++) _2[i]=_2[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,p=<span class="number">2</span>;p&lt;=tot;i++,p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+p<span class="number">-1</span>&lt;=tot;j++)</span><br><span class="line">            <span class="keyword">if</span>(dep[f[i<span class="number">-1</span>][j]]&lt;dep[f[i<span class="number">-1</span>][j+p/<span class="number">2</span>]]) f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> f[i][j]=f[i<span class="number">-1</span>][j+p/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        x=dfn[x],y=dfn[y];</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="keyword">int</span> p=_2[y-x+<span class="number">1</span>],u=<span class="number">1</span>&lt;&lt;p;</span><br><span class="line">        <span class="keyword">return</span> dep[f[p][x]]&gt;dep[f[p][y-u+<span class="number">1</span>]]?f[p][y-u+<span class="number">1</span>]:f[p][x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> ST::lca;<span class="keyword">using</span> ST::dep;</span><br><span class="line"><span class="keyword">int</span> dfn[N],ind,id[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    id[dfn[u]=++ind]=u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:g[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> seg_tree&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> M=N*<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> ls[M],rs[M],cnt;</span><br><span class="line">    <span class="keyword">int</span> f[M],fl[M],fr[M];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        f[u]=f[ls[u]]+f[rs[u]]-dep[<span class="built_in">lca</span>(id[fr[ls[u]]],id[fl[rs[u]]])];</span><br><span class="line">        fl[u]=fl[ls[u]]?fl[ls[u]]:fl[rs[u]];</span><br><span class="line">        fr[u]=fr[rs[u]]?fr[rs[u]]:fr[ls[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;u,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!u) u=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(l==r)&#123;fl[u]=fr[u]=p,f[u]=dep[id[p]];<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p&lt;=mid) <span class="built_in">insert</span>(ls[u],l,mid,p);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">insert</span>(rs[u],mid+<span class="number">1</span>,r,p);</span><br><span class="line">        <span class="built_in">upd</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x+y;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        ls[x]=<span class="built_in">merge</span>(ls[x],ls[y],l,mid);rs[x]=<span class="built_in">merge</span>(rs[x],rs[y],mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">upd</span>(x);<span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> seg_tree::insert;<span class="keyword">using</span> seg_tree::merge;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;q[N];</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:q[u]) <span class="built_in">insert</span>(root[u],<span class="number">1</span>,tot,dfn[v]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:g[u]) <span class="built_in">solve</span>(v),root[u]=<span class="built_in">merge</span>(root[u],root[v],<span class="number">1</span>,tot);</span><br><span class="line">    <span class="keyword">if</span>(u!=<span class="number">1</span>) ans+=<span class="built_in">max</span>(seg_tree::f[root[u]]<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> runs&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1019260817</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line">    <span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line">    P <span class="keyword">operator</span> +(<span class="keyword">const</span> P a,<span class="keyword">const</span> P b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>((a.fi+b.fi)%mod,(a.se+b.se)%mod);&#125;</span><br><span class="line">    P <span class="keyword">operator</span> +(<span class="keyword">const</span> P a,<span class="keyword">const</span> <span class="keyword">int</span> b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>((a.fi+b)%mod,(a.se+b)%mod);&#125;</span><br><span class="line">    P <span class="keyword">operator</span> -(<span class="keyword">const</span> P a,<span class="keyword">const</span> P b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>((a.fi-b.fi+mod)%mod,(a.se-b.se+mod)%mod);&#125;</span><br><span class="line">    P <span class="keyword">operator</span> *(<span class="keyword">const</span> P a,<span class="keyword">const</span> P b)&#123;<span class="keyword">return</span> <span class="built_in">MP</span>(<span class="number">1ll</span>*a.fi*b.fi%mod,<span class="number">1ll</span>*a.se*b.se%mod);&#125;</span><br><span class="line">    <span class="keyword">const</span> P B=<span class="built_in">MP</span>(<span class="number">233</span>,<span class="number">2333</span>);</span><br><span class="line">    <span class="keyword">int</span> s[N];</span><br><span class="line">    P h[N],bs[N],bh[N];</span><br><span class="line">    <span class="function">P <span class="title">get</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*bs[r-l+<span class="number">1</span>];&#125;</span><br><span class="line">    <span class="function">P <span class="title">getb</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> bh[l]-bh[r+<span class="number">1</span>]*bs[r-l+<span class="number">1</span>];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_pal</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">get</span>(l,r)==<span class="built_in">getb</span>(l,r);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">qry_pal</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p=ap[r];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=_2[dep[p]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(len[f[p][i]]&gt;r-l+<span class="number">1</span>) p=f[p][i];</span><br><span class="line">        <span class="keyword">if</span>(len[p]&gt;r-l+<span class="number">1</span>) p=f[p][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(len[p]==r-l+<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">is_pal</span>(l,r-len[p]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=n-<span class="built_in">max</span>(x,y)+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">get</span>(x,x+mid<span class="number">-1</span>)==<span class="built_in">get</span>(y,y+mid<span class="number">-1</span>)) l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="built_in">min</span>(x,y);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">get</span>(x-mid+<span class="number">1</span>,x)==<span class="built_in">get</span>(y-mid+<span class="number">1</span>,y)) l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>&#123;<span class="keyword">int</span> l=<span class="built_in">lcp</span>(l1,l2); <span class="keyword">return</span> s[l1+l]&lt;s[l2+l];&#125;</span><br><span class="line">    <span class="keyword">int</span> nxt[N];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lyndon</span><span class="params">(<span class="keyword">bool</span> ell)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i;i--) <span class="keyword">for</span>(nxt[i]=i+<span class="number">1</span>;nxt[i] &amp;&amp; <span class="built_in">cmp</span>(nxt[i],i)==ell;nxt[i]=nxt[nxt[i]]);&#125;</span><br><span class="line">    pair&lt;P,<span class="keyword">int</span>&gt; per[N*<span class="number">20</span>];<span class="keyword">int</span> pt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make_runs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=n<span class="number">-1</span>;k;k--)</span><br><span class="line">        <span class="keyword">if</span>(nxt[k])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> dl=<span class="built_in">lcs</span>(k,nxt[k]),dr=<span class="built_in">lcp</span>(k,nxt[k]),p=nxt[k]-k;</span><br><span class="line">            <span class="keyword">int</span> l=k-dl+<span class="number">1</span>,r=nxt[k]+dr<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">if</span>(dl+dr&lt;=p) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;l+p &amp;&amp; i+<span class="number">2</span>*p<span class="number">-1</span>&lt;=r;i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">qry_pal</span>(i,i+<span class="number">2</span>*p<span class="number">-1</span>))</span><br><span class="line">            per[++pt]=<span class="built_in">MP</span>(<span class="built_in">get</span>(i,i+<span class="number">2</span>*p<span class="number">-1</span>),(r-i+<span class="number">1</span>)/p-<span class="built_in">is_pal</span>(i,i+<span class="number">2</span>*p<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=::s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        bs[<span class="number">0</span>]=<span class="built_in">MP</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) h[i]=h[i<span class="number">-1</span>]*B+s[i],bs[i]=bs[i<span class="number">-1</span>]*B;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) bh[i]=bh[i+<span class="number">1</span>]*B+s[i];</span><br><span class="line">        <span class="built_in">lyndon</span>(<span class="number">0</span>);<span class="built_in">make_runs</span>();</span><br><span class="line">        <span class="built_in">lyndon</span>(<span class="number">1</span>);<span class="built_in">make_runs</span>();</span><br><span class="line">        <span class="built_in">sort</span>(per+<span class="number">1</span>,per+pt+<span class="number">1</span>);<span class="built_in">reverse</span>(per+<span class="number">1</span>,per+pt+<span class="number">1</span>);</span><br><span class="line">        ll res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pt;i++)</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span> || per[i].fi!=per[i<span class="number">-1</span>].fi) res+=<span class="number">1ll</span>*per[i].se*(per[i].se<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        ans-=res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    PAM::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) g[fa[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ap[i]=PAM::<span class="built_in">insert</span>(ap[i<span class="number">-1</span>],i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) bp[i]=PAM::<span class="built_in">find_r</span>(bp[i+<span class="number">1</span>],i);</span><br><span class="line">    PAM::<span class="built_in">upd_fa</span>();</span><br><span class="line">    fa[<span class="number">1</span>]=<span class="number">0</span>;len[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++) g[fa[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ap[i]=<span class="built_in">max</span>(ap[i],<span class="number">1</span>),bp[i]=<span class="built_in">max</span>(bp[i],<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">init_f</span>(tot);ST::<span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) q[bp[i]].<span class="built_in">push_back</span>(ap[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>),<span class="built_in">solve</span>(<span class="number">1</span>);</span><br><span class="line">    runs::<span class="built_in">solve</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>test</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>加密</title>
    <url>/2021/10/10/%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h1 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h1><span id="more"></span>
<style>

.underline-input {
  border: none;
  border-bottom: #099 groove 1px;
  outline: none;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}

.underline-input:focus-visible {
  border-bottom: #0cc groove 1px;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}

.gradual-button {
  padding: 0.5em 1em;
  text-align: center;
  border-radius: 0px;
  border-width: 0px;
  background-color: #ddd;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}

.gradual-button:hover {
  cursor: pointer;
  background-color: #bbb;
  transition-delay: 0s;
  transition-duration: 0.25s;
  transition-timing-function: ease-in-out;
}
</style>
<script src="https://cdn.bootcss.com/crypto-js/3.1.9-1/crypto-js.min.js"></script>
<script>
    //DES加密
    function encryptByDES(message, key){
        var keyHex = CryptoJS.enc.Utf8.parse(key);
        var encrypted = CryptoJS.DES.encrypt(message, keyHex, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7
        });
        return encrypted.ciphertext.toString();
    }
    //DES加密
    function decryptByDES(ciphertext, key){
        var keyHex = CryptoJS.enc.Utf8.parse(key);
        var decrypted = CryptoJS.DES.decrypt({
            ciphertext: CryptoJS.enc.Hex.parse(ciphertext)
        }, keyHex, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7
        });
        var result_value = decrypted.toString(CryptoJS.enc.Utf8);
        return result_value;
    }
    function loadMath() {
        if (typeof MathJax === 'undefined') {
            window.MathJax = {
            loader: {
                load: ['[tex]/mhchem'],
                source: {
                '[tex]/amsCd': '[tex]/amscd',
                '[tex]/AMScd': '[tex]/amscd'
                }
            },
            tex: {
                inlineMath: {'[+]': [['$', '$']]},
                packages: {'[+]': ['mhchem']},
                tags: 'ams'
            },
            options: {
                renderActions: {
                findScript: [10, doc => {
                    document.querySelectorAll('script[type^="math/tex"]').forEach(node => {
                    const display = !!node.type.match(/; *mode=display/);
                    const math = new doc.options.MathItem(node.textContent, doc.inputJax[0], display);
                    const text = document.createTextNode('');
                    node.parentNode.replaceChild(text, node);
                    math.start = {node: text, delim: '', n: 0};
                    math.end = {node: text, delim: '', n: 0};
                    doc.math.push(math);
                    });
                }, '', false],
                insertedScript: [200, () => {
                    document.querySelectorAll('mjx-container').forEach(node => {
                    let target = node.parentNode;
                    if (target.nodeName.toLowerCase() === 'li') {
                        target.parentNode.classList.add('has-jax');
                    }
                    });
                }, '', false]
                }
            }
            };
            (function () {
            var script = document.createElement('script');
            script.src = '//cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
            script.defer = true;
            document.head.appendChild(script);
            })();
        } else {
            MathJax.startup.document.state(0);
            MathJax.texReset();
            MathJax.typeset();
        }
    }
    function encrypt(demo,str1,key1) {
        var s , key , text;
        s = document.getElementById(str1).value;
        key = document.getElementById(key1).value;
        text = encryptByDES(s, key);
        document.getElementById(demo).innerHTML = text;
    }
    function decrypt(demo,str1,key1) {
        var s , key , text;
        s = document.getElementById(str1).value;
        key = document.getElementById(key1).value;
        text = decryptByDES(s, key);
        document.getElementById(demo).innerHTML = text;
        loadMath();
    }
</script>

<h2 id="DES-加密"><a href="#DES-加密" class="headerlink" title="DES 加密"></a>DES 加密</h2><p>文本：</p>
<input id="str1">

<p>秘钥：</p>
<input type="password" id="key1">

<p>加密文本：<p id="demo1"></p></p>
<p><button type="button" onclick="encrypt('demo1','str1','key1')">加密</button></p>
<h2 id="DES-解密"><a href="#DES-解密" class="headerlink" title="DES 解密"></a>DES 解密</h2><p>文本：</p>
<input id="str2">

<p>秘钥：</p>
<input type="password" id="key2">

<p>解密文本：<p id="demo2"></p></p>
<p><button type="button" onclick="decrypt('demo2','str2','key2')">加密</button></p>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>加密</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅地求区间本质不同回文串</title>
    <url>/2021/10/17/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E5%9C%B0%E6%B1%82%E5%8C%BA%E9%97%B4%E6%9C%AC%E8%B4%A8%E4%B8%8D%E5%90%8C%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    <content><![CDATA[<p>如何优雅地求区间本质不同回文串</p>
<span id="more"></span>

<h2 id="0-O-n-2"><a href="#0-O-n-2" class="headerlink" title="0. $O(n^2)$"></a>0. $O(n^2)$</h2><p>直接暴力。一点都不优雅。</p>
<h2 id="1-O-n-sqrt-n-Sigma"><a href="#1-O-n-sqrt-n-Sigma" class="headerlink" title="1. $O(n\sqrt n\Sigma)$"></a>1. $O(n\sqrt n\Sigma)$</h2><p>允许双向加的回文树，再套一个(在线)莫队即可。</p>
<p>太拉了，还难写。</p>
<h2 id="2-O-n-log-2-n"><a href="#2-O-n-log-2-n" class="headerlink" title="2. $O(n\log^2 n)$"></a>2. $O(n\log^2 n)$</h2><p>考虑离线，依次加入字符，维护每个 $i$ 作为左端点的答案。</p>
<p>考虑维护差分数组，这样每次答案是一段后缀和。</p>
<p>思考一种暴力思路：在回文树上，对于每个串 $s_j$ 记录最晚出现位置 $p_j$。</p>
<p>设一次加入后字符串长度为 $n$，本质上是对于回文树上这个字符串到根路径上所有字符串 $s_j$，在 $p_j$ 处 $-1$，在 $n-|s_j|$ 处 $+1$，并将 $p_j$ 改为 $n-|s_j|$。</p>
<p>直接做显然会被卡掉。</p>
<p>考虑一个事情，每个回文串的 border 可以表示为 $O(\log n)$ 个等差数列。注意到一个性质：对于回文串 $s$，如果存在长度 $q(q&gt;\frac{|s|}2)$ 的回文前缀，那么一定存在 $|s|-q$ 的周期。换句话说，如果存在长度为 $p,q(p&gt;q&gt;\frac{|s|}{2})$ 的回文前缀，那么一定存在 $2q-p$ 是回文前缀。</p>
<p>所以任意两个等差数列都有前者的首项大于后者的末项的两倍。</p>
<p>并且观察到一个事实：对于等差数列 $s_i=u^i+s_0$，一定有 $p_i=-i|u|+p_0$。换句话说这个字符串的贡献是当前左端点到后一项的左端点。</p>
<p><img src="/image/1.png"></p>
<p>贡献和的并就是最后一个位置为右端点，整个区间上一次出现位置为左端点的区间。</p>
<p>换句话说，我们只需要贡献所有不存在长度 $&gt;\frac{|s|}2$ 的回文串后缀的后缀 $s$ 即可。这样的 $s$ 最多 $O(\log n)$ 个，具体求出可以直接在回文树上预处理。</p>
<p>复杂度 $O(n\log^2 n)$。</p>
<h2 id="3-O-n-log-n"><a href="#3-O-n-log-n" class="headerlink" title="3. $O(n\log n)$"></a>3. $O(n\log n)$</h2><p>对于任意字符串 $s$，如果 $s$ 不是整循环串，那么 $s$ 的所有循环位移中至多只有 $2$ 个是回文串。可以想象一个定义在圆上的函数，如果有两条不重合的对称轴，那么一定是一个周期函数。</p>
<p>考虑原串的 Runs $(l,r,p)$，显然 $s[l:l+p-1]$ 不是整循环串（Runs 的定义），那么至多只有 $2$ 个**极长整循环周期为 $p$ **的回文串。</p>
<p>可以发现上述算法中，每个<strong>极长整循环</strong>的回文串只有在循环节处会产生 $O(\log n)$ 的处理代价。而所有极长整循环的回文串指数之和不超过 Runs 的指数之和的两倍，故是 $O(n)$ 的。</p>
<p>所以上面那个算法其实是 $O(n\log n)$ 的。</p>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>字符串</tag>
        <tag>idea</tag>
      </tags>
  </entry>
</search>
